%% folders houses and labels
path_root='../';
repertory_result='generated_results/';

%change this part to obtain the results you want
folder='section4A_oneHourAhead';
labels={'real','real_24','LinearRegression','SVR','MLP'};
houses={'1002','1014','1018','1022','1440','1695','4332', '1843','6568','1859','1807', '2103','2387','4879','2265','2945','3355','4076','4755','3816','1331','6445','5291','3660','1969'};
nb_lines=4317;


%% importation of the data
% it is stored in a cell, that contains one case for each house
data=cell(size(houses,2),1);
for i=1:size(houses,2)
   data{i}=zeros(nb_lines,size(labels,2));
   for j=1:size(labels,2)
        vecto=load(strcat(path_root,repertory_result,folder,'/',labels{j},'/',houses{i},'.txt'));
        data{i}(:,j)=vecto(end-nb_lines+1:end);
   end
end

%% creation of the date vector to plot data
random_house=load(strcat(path_root,'aggregated_data/1002.txt'));
date_vector=random_house(end-nb_lines+1:end,1);
for i=1:length(date_vector)
   time_labels(i,:)=convertTimestamp(date_vector(i));
end

%% plot of the result for one house
figure;
hold all;
house=1; % see the vector "houses" to know what is the id it refers to 
for i=1:length(labels)
    plot((1:nb_lines)',data{house}(:,i));
end
legend(labels);
ax=axis;
xmin=1;
xmax=3000;

set(gca,'XTick',1:nb_lines,'XLim',[xmin, xmax]);

Yl = ax(3:4); % Y-axis limits
t = text(xmin:12:xmax,0*ones(1,length(xmin:12:xmax)),time_labels(xmin:12:xmax,:));
set(t,'HorizontalAlignment','right','VerticalAlignment','top','Rotation',90);
set(gca,'XTickLabel','')
xlabel('time');
ylabel('consumption (kWh)');
%% exploitatation - L2
% give the L2 difference between the obtained data
% and reality
l2diff=zeros(size(houses,2), size(labels,1));
for i=1:size(houses,2)
   for j=1:size(labels,2)
      l2diff(i,j)=sqrt(mean((data{i}(:,j)-data{i}(:,1)).^2)); 
   end
end
disp('RMSE for each house is available in matrix l2diff');

l1diff=zeros(size(houses,2), size(labels,1));
for i=1:size(houses,2)
   for j=1:size(labels,2)
      l1diff(i,j)=sum(data{i}(:,j)-data{i}(:,1)); 
   end
end
disp('Norm 1 diff for each house is available in matrix l1diff');

% give the NRMSE
nrmse=zeros(size(houses,2), size(labels,1));

for j=1:size(labels,2)
   for i=1:size(houses,2)
      nrmse(i,j)=sqrt(mean((data{i}(:,j)-data{i}(:,1)).^2)); 
      nrmse(i,j)=nrmse(i,j)/sqrt(mean(data{i}(:,1).^2));
   end
   disp(strcat('for classifier :',labels{j},' average nrmse is :',num2str(mean(nrmse(:,j))),' and std is :',num2str(mean(nrmse(:,j)))));
end
disp('detail for each house can be found in the matrix nrmse')

% %% this part establishes the average RMSE per hour
% figure;
% hold all;
% av_RMSE_per_hour=zeros(1,24);
% [~,hour_vector,~]=transformTimestamp2(date_vector);
% classifiers=[2,3,4];
% 
% for j=1:length(classifiers)
% classifier=classifiers(j);
% for hour=1:24
%     rmse=0;
%     for house=1:size(houses,2)
%         rmse=rmse+sqrt(mean((data{house}(hour_vector==hour,classifier)-data{house}(hour_vector==hour,1)).^2)); 
%     end
%     av_RMSE_per_hour(hour)=rmse/size(houses,2);
% end
% plot(1:24, av_RMSE_per_hour);
% end
% xlabel('hour of the day');
% ylabel('average RMSE (over houses)')
% legend('h-24','middle4 of 6', 'ISONE','PMJEco','LinReg, 12 leaders and baselines','SMOReg, 12 leaders and baselines');
% rmsesmo=av_RMSE_per_hour;

% %% do nice graph to illustrate that a part o the dataset is useless
% place=[3,9,4,10,5,11,6,12];
% errs=l2diff(:,6:end);
% errs=errs(:, place);
% mean_err=mean(errs);
% boxplot(errs());
% ylabel('RMSE on the test set');